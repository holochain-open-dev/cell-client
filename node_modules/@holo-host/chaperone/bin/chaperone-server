#!/usr/bin/env node

const path = require('path');
const log = require('@whi/stdlog')(path.basename(__filename), {
  level: process.env.LOG_LEVEL || 'fatal',
});

const fs = require('fs');
const stream = require('stream');

const http_utils = require('@whi/http_utils');
const { Command } = require('commander');
const print = require('@whi/printf').colorAlways();
const { sprintf } = require('sprintf-js');

const DEFAULTS = Object.freeze({
  "PORT": 24273,
});
const dev_mode = process.env.DEV_MODE === "on";
if (dev_mode === true)
  print("Development mode has been turned on.");

const VERSION = "0.1.0";
const NODE_VERSION = process.version.slice(1).split('.').map(parseInt);

if (NODE_VERSION[0] < 12)
  print("WARNING!! This version of Node (%s) is not supported.  Supported versions are v12 or newer", process.version);


function increaseVerbosity(v, total) {
  return total + 1;
}

function main(argv) {
  return new Promise(async (f, r) => {
    const commander = new Command();

    commander
      .version(VERSION)
      .option('-v, --verbose', 'Increase logging verbosity', increaseVerbosity, 0)
      .option('-c, --config <filepath>', 'Chaperone configuration file');

    commander.on('command:*', function () {
      r(sprintf("Invalid command: %s", commander.args.join(' ')));
    });

    commander.parse(argv);

    log.warn("Verbosity: %d (LOG_LEVEL=%s)", commander.verbose || 0, process.env.LOG_LEVEL);
    if (!process.env.LOG_LEVEL)
      log.transports[0].setLevel(commander.verbose);

    log.silly("argv: %s", argv);

    if (commander.config === undefined)
      return r("Nothing to do");

    const asset_dir = path.join(__dirname, "..");
    const config_file = path.join(process.env.PWD, commander.config);

    log.normal("Process config file: %s", config_file);
    const config = require(config_file);

    const index_file = path.join(__dirname, "html", "index.html");
    let html_template = fs.readFileSync(index_file, 'utf8');

    if (config.mode === undefined) {
      config.mode = "Chaperone.HCC";
    }
    if (config.connection.path === undefined) {
      config.connection.path = '/'
    }

    print("Configuration: %s", JSON.stringify(config, null, 4));
    if (config.web_user_legend)
      config.web_user_legend = JSON.stringify(config.web_user_legend);
    log.normal("Template '%s' (%s)", typeof html_template, html_template.length);
    let html_content = sprintf(html_template, config);

    const http_server = new http_utils.server();

    log.debug("Asset directory is: %s", asset_dir);
    http_server.serve_local_assets(asset_dir, function (req_path, default_path) {
      print("Serving %-50.50s (default response %s)", req_path, default_path);
      if (req_path === "/") {
        this.contentType("text/html");

        if (dev_mode) {
          html_template = fs.readFileSync(index_file, 'utf8');
          html_content = sprintf(html_template, config);
        }

        return html_content;
      }
    });

    http_server.listen(config.port || DEFAULTS.PORT);
    print("Server is ready and listening on [%(address)s]:%(port)s (%(family)s)", http_server.address());
  });
}


if (typeof require != 'undefined' && require.main == module) {
  function exit(status) {
    return (msg) => {
      print(msg);
      process.exit(status);
    };
  }

  const controlled_exit = exit(1);
  const unexpected_exit = exit(2);

  main(process.argv).then(
    result => {
      log.info("Exit with success: %s", result);
    },
    err => {
      if (err instanceof Error) {
        console.log(err);
        unexpected_exit(String(err).split("\n")[0]);
      }
      else {
        controlled_exit(err);
      }
    }
  );
}

module.exports = main;
