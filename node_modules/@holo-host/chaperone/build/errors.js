class CustomError extends Error {
  constructor (...params) {
    super(...params)

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor)
    }

    this.name = this.constructor.name
  }

  [Symbol.toPrimitive] (hint) {
    return hint === 'number' ? null : this.toString()
  }

  toString () {
    return `[${this.constructor.name}( ${this.message} )]`
  }

  toJSON (debug = false) {
    return {
      error: this.name,
      message: this.message,
      stack:
        debug === true
          ? typeof this.stack === 'string'
            ? this.stack.split('\n')
            : this.stack
          : undefined
    }
  }
}

class HoloError extends CustomError {}

class AppError extends CustomError {}

class UserError extends CustomError {}

class RegistrationError extends AppError {}

class HostingError extends AppError {}

module.exports = {
  HoloError,
  AppError,
  RegistrationError,
  HostingError,
  UserError
}
